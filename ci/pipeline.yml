resource_types:
- name: bosh-deployment
  type: docker-image
  source:
    repository: cloudfoundry/bosh-deployment-resource

s3_bucket_semver: &s3_bucket_semver
  driver: s3
  region_name: ((s3_region))
  initial_version: 0.0.1
  bucket: ((s3_bucket_semver))
  key: deployments/kafka/version
  access_key_id: ((s3_access_key_id))
  secret_access_key: ((s3_secret_access_key))

s3_bucket_binary: &s3_bucket_binary
  region_name: ((s3_region))
  bucket: ((s3_bucket_binary))
  access_key_id: ((s3_access_key_id))
  secret_access_key: ((s3_secret_access_key))

resources:
- name: kafka-deployment
  type: git
  source:
    uri: https://github.com/bosh-rebels/kafka-deployment
    branch: master

- name: ubuntu-xenial
  type: bosh-io-stemcell
  source:
    name: bosh-aws-xen-hvm-ubuntu-xenial-go_agent
    version_family: ((stemcell_version))

- name: deploy-release
  type: bosh-deployment
  source: &deploy-release-source
    deployment: kafka
    target: ((bosh_target))
    client: ((bosh_client))
    client_secret: ((bosh_client_secret))
    ca_cert: ((bosh_ca_cert))

- name: delete-deployment
  type: bosh-deployment
  source:
    <<: *deploy-release-source

- name: running-version
  type: semver
  source:
    <<: *s3_bucket_semver
    key: deployments/kafka/version

- name: bumped-version
  type: semver
  source:
    <<: *s3_bucket_semver
    key: deployments/kafka/version

- name: kafka-compiled-release
  type: s3
  source:
    <<: *s3_bucket_binary
    regexp: kafka/kafka-(.*)-ubuntu-xenial-((stemcell_version))-.*.tgz

- name: zookeeper-compiled-release
  type: s3
  source:
    <<: *s3_bucket_binary
    regexp: zookeeper/zookeeper-(.*)-ubuntu-xenial-((stemcell_version))-.*.tgz

- name: cmak-compiled-release
  type: s3
  source:
    <<: *s3_bucket_binary
    regexp: cmak/cmak-(.*)-ubuntu-xenial-((stemcell_version))-.*.tgz

- name: bpm-compiled-release
  type: s3
  source:
    <<: *s3_bucket_binary
    regexp: "bpm/bpm-(.*)-ubuntu-xenial-((stemcell_version))-.*.tgz"

- name: kafka-deployment-current-tarball
  type: s3
  source:
    <<: *s3_bucket_binary
    regexp: "deployments/kafka/kafka-(.*).tgz"
    initial_path: "deployments/kafka/kafka-0.0.0.tgz"

jobs:
- name: deploy-kafka
  plan:
  - get: kafka-deployment
    trigger: true
  - get: kafka-compiled-release
  - get: zookeeper-compiled-release
  - get: cmak-compiled-release
  - get: bpm-compiled-release
  - get: ubuntu-xenial
  - get: running-version
  - get: bumped-version
    params: {bump: patch}
  - task: calculate-sha1-for-kafka
    file: kafka-deployment/ci/tasks/calculate-sha1/task.yml
    input_mapping:
      tarball: kafka-compiled-release
    output_mapping:
      sha: kafka-sha1
  - task: calculate-sha1-for-zookeeper
    file: kafka-deployment/ci/tasks/calculate-sha1/task.yml
    input_mapping:
      tarball: zookeeper-compiled-release
    output_mapping:
      sha: zookeeper-sha1
  - task: calculate-sha1-for-bpm
    file: kafka-deployment/ci/tasks/calculate-sha1/task.yml
    input_mapping:
      tarball: bpm-compiled-release
    output_mapping:
      sha: bpm-sha1
  - task: calculate-sha1-for-cmak
    file: kafka-deployment/ci/tasks/calculate-sha1/task.yml
    input_mapping:
      tarball: cmak-compiled-release
    output_mapping:
      sha: cmak-sha1
  - load_var: kafka_version
    file: kafka-compiled-release/version
  - load_var: kafka_sha1
    file: kafka-sha1/sha1
  - load_var: zookeeper_version
    file: zookeeper-compiled-release/version
  - load_var: zookeeper_sha1
    file: zookeeper-sha1/sha1
  - load_var: cmak_version
    file: cmak-compiled-release/version
  - load_var: cmak_sha1
    file: cmak-sha1/sha1
  - load_var: bpm_version
    file: bpm-compiled-release/version
  - load_var: bpm_sha1
    file: bpm-sha1/sha1
  - put: deploy-release
    params:
      manifest: kafka-deployment/manifest.yml
      stemcells:
      - ubuntu-xenial/*.tgz
      releases:
      - kafka-compiled-release/*.tgz
      - zookeeper-compiled-release/*.tgz
      - cmak-compiled-release/*.tgz
      - bpm-compiled-release/*.tgz
      vars:
        bpm_sha1: ((.:bpm_sha1))
        cmak_instances: 1
        cmak_network: default
        cmak_persistent_disk_type: default
        cmak_sha1: ((.:cmak_sha1))
        cmak_stemcell: default
        cmak_vm_type: default
        deployment_name: kafka
        generatetopics_network: default
        generatetopics_stemcell: default
        generatetopics_vm_type: default
        kafka_deployment_stemcell_os: ubuntu-xenial
        kafka_deployment_stemcell_version: ((stemcell_version))
        kafka_enable_topics: false
        kafka_instances: 3
        kafka_network: default
        kafka_persistent_disk_type: default
        kafka_sha1: ((.:kafka_sha1))
        kafka_stemcell: default
        kafka_vm_type: default
        sanitytest_network: default
        sanitytest_stemcell: default
        sanitytest_vm_type: default
        smoke_tests_network: default
        smoke_tests_stemcell: default
        smoke_tests_vm_type: default
        zookeeper_instances: 3
        zookeeper_network: default
        zookeeper_persistent_disk_type: default
        zookeeper_sha1: ((.:zookeeper_sha1))
        zookeeper_stemcell: default
        zookeeper_vm_type: default
        zookeeper_data_log_dir: /var/vcap/store/zookeeper
        kafka_auto_create_topics_enable: true
        kafka_delete_topic: true
        kafka_offsets_topic_replication_factor: 2
        kafka_transaction_state_log_min_isr: 1
        kafka_topics: {}
    on_success:
      do:
        - get: kafka-deployment-current-tarball
          params: { skip_download: "true"}
        - task: create-offline-release
          file: kafka-deployment/ci/tasks/create-offline-release/task.yml
          params:
            deployment_name: kafka
            BOSH_ENVIRONMENT: ((bosh_target))
            BOSH_CA_CERT: ((bosh_ca_cert))
            BOSH_CLIENT: ((bosh_client))
            BOSH_CLIENT_SECRET: ((bosh_client_secret))

        - put: running-version
          params: {file: target/version}

- name: delete-kafka-deployment
  plan:
  - put: delete-deployment
    params:
      delete:
        enabled: true
        force: true
